#region All The Imports Are Here
  
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices.WindowsRuntime;
    using Windows.Foundation;
    using Windows.Foundation.Collections;
    using Windows.UI.Xaml;
    using Windows.UI.Xaml.Controls;
    using Windows.UI.Input.Inking;
    using Windows.UI.Xaml.Controls.Primitives;
    using Windows.UI.Xaml.Data;
    using Windows.UI.Xaml.Input;
    using Windows.UI.Xaml.Shapes;
    using Windows.UI.Xaml.Media;
    using Windows.UI.Xaml.Navigation;
    using Windows.Storage;
    using Windows.Devices.Input;
    using Windows.Storage.Pickers;
    using Windows.UI;
    using Windows.UI.Input;
    using Windows.Storage.Streams;
    using System.Threading.Tasks;
    using Windows.UI.Popups;
    using Windows.UI.Xaml.Media.Imaging;

#endregion

namespace PaintApp
{

    public sealed partial class InkPage : Page
    {

        InkManager inkManager;          //InkManager For Managing All The Drawing On The Given Canvas    
        uint pointerId;                 //For Holding The Pointer Id[that is to differentiate touch input from mouse input]
        Point previousPosition;      //For Holding The Position Of The Cursor When The Mouse Is Pressed
        Point currentPosition;      //For Holding The Position Of The Cursor When The Mouse Is Moved
        Point releasePosition;      //For Holding The Position Of The Cursor When The Mouse Is Released
        int strokeThickness;            //For Holding The Thickness Of The Drawing Pen
        SolidColorBrush pen;            //For Holding The Color Of The Drawing Pen
        enum ShapeTyp { RECTANGLE, ELLIPSE, LINE, STRAIGHTLINE};         //For Holding The Type Of Shape To Be Drawn
        ShapeTyp shapeKind;
        Line line;              //For Drawing The ShapeLess Drawing
        Ellipse ellipse;        //For Drawing The Ellipse
        Rectangle rectangle;    //For Drawing The Rectangle
        Line straightLine;      //For Drawing The StraightLine
        SolidColorBrush fillPen = new SolidColorBrush(Colors.LightBlue);

        public InkPage()
        {
            this.InitializeComponent();     //AutoGenerated
            DefaultConditions();
            
            InkCanvas.PointerPressed += new PointerEventHandler(OnMouseDownCanvas);     //Attach The Event Listener To The White Canvas
            InkCanvas.PointerMoved += new PointerEventHandler(OnMouseMovedCanvas);     //Attach The Event Listener To The White Canvas
            InkCanvas.PointerReleased += new PointerEventHandler(OnMouseReleasedCanvas);     //Attach The Event Listener To The White Canvas
        }

        private void DefaultConditions()        //This Is The Method Called On The Startup Of The PaintApp
        {

            inkManager = new InkManager();      //Initializes The Inkmanager
            strokeThickness = 5;            //Initialize The Drawing Pen's Thickness To 5
            shapeKind = ShapeTyp.LINE;     //Initialize The Drawing Shape To Line
            pen = new SolidColorBrush(Colors.Black);        //Initialize The Drawing Pen With Black Color
            hideLayers();
        }

        private void BrushSizeHandler()         //For Changing The Brush Size According To The Radio Button That Is Checked
        {
                strokeThickness = (int)slider.Value;           //Register The strokeThickness to 10
        }

        private void ShapeTypHandler()
        {
            if (shapeKind == ShapeTyp.ELLIPSE)         //Check If Selected Type Is Ellipse
            {
                InkCanvas.Children.Remove(ellipse);
                ellipse = new Ellipse()
                {
                    Margin = new Thickness(previousPosition.X, previousPosition.Y, 0, 0),
                    Height = Math.Abs(previousPosition.Y - currentPosition.Y),
                    Width = Math.Abs(previousPosition.X - currentPosition.X),
                    StrokeThickness = strokeThickness,
                    Stroke = pen
                };
            }
            else if (shapeKind == ShapeTyp.RECTANGLE)      //Check If Selected Type Is Rectangle
            {
                InkCanvas.Children.Remove(rectangle);
                rectangle = new Rectangle()
                {
                    Margin = new Thickness(previousPosition.X, previousPosition.Y, 0, 0),
                    Height = Math.Abs(previousPosition.Y - currentPosition.Y),
                    Width = Math.Abs(previousPosition.X - currentPosition.X),
                    StrokeThickness = strokeThickness,
                    Stroke = pen
                };
            }
            else if (shapeKind == ShapeTyp.LINE)       //Check If Selected Type Is Line
            {
                line = new Line()                       //Initializing The Line With Two Cursor Positions
                {
                    X1 = previousPosition.X,
                    Y1 = previousPosition.Y,         //Cursor Coordinate From The Mouse Press Event
                    X2 = currentPosition.X,
                    Y2 = currentPosition.Y,                 //Cursor Coordinate From The Mouse Move Event
                    StrokeThickness = strokeThickness,                              //Set The Thickness Of The Drawing Pen
                    Stroke = pen                       //Set The Stroking Object To pen
                };
            }
            else if (shapeKind == ShapeTyp.STRAIGHTLINE)
            {
                InkCanvas.Children.Remove(straightLine);
                straightLine = new Line()
                {
                    X1 = previousPosition.X,
                    Y1 = previousPosition.Y,         //Cursor Coordinate From The Mouse Press Event
                    X2 = currentPosition.X,
                    Y2 = currentPosition.Y,                 //Cursor Coordinate From The Mouse Move Event
                    StrokeThickness = strokeThickness,                              //Set The Thickness Of The Drawing Pen
                    Stroke = pen
                };
            }
        }

        private void OnMouseDownCanvas(object sender, PointerRoutedEventArgs e)     //Event Handler When The Mouse Is Pressed On The White Canvas
        {

            try
            {
                BrushSizeHandler();         //Handles The Size Of The Brush

                PointerDeviceType pointerType = e.Pointer.PointerDeviceType;        //For Determining The Pointer Type (Touch or Mouse)
                PointerPoint pt = e.GetCurrentPoint(InkCanvas);      //Get The Current Position Of The Cursor
                previousPosition = pt.Position;              //Register The Position Of The Cursor When Pressed

                if (pointerType == PointerDeviceType.Mouse && pt.Properties.IsLeftButtonPressed)
                {        //For Checking If Pointer Is Mouse And If Left Clicked
                    inkManager.ProcessPointerDown(pt);      //For Processing The Click Event
                    pointerId = pt.PointerId;           //Register The Pointer Id
                    e.Handled = true;               //Tell Event Is Success
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void OnMouseMovedCanvas(object sender, PointerRoutedEventArgs e)        //Event Handler When The Mouse Is Moved On The White Canvas
        {
            try
            {
                if (e.Pointer.PointerId == pointerId)       //For Checking If The Same Pointer Is Used[that is to differentiate mouse input from touch input]
                {
                    PointerPoint pt = e.GetCurrentPoint(InkCanvas);     //For Getting The Current Position Of The Pointer
                    currentPosition = pt.Position;            //Registering The Position
                    ShapeTypHandler();                     //Handles The Shape Of The Drawn Object
                    if (shapeKind == ShapeTyp.RECTANGLE || shapeKind == ShapeTyp.ELLIPSE || shapeKind == ShapeTyp.STRAIGHTLINE)
                    {
                        switch (shapeKind)
                        {
                            case ShapeTyp.RECTANGLE:
                                InkCanvas.Children.Add(rectangle);      //Add The Rectangle To The Canvas
                                break;
                            case ShapeTyp.ELLIPSE:
                                InkCanvas.Children.Add(ellipse);        //Add The Ellipse To The Canvas
                                break;
                            case ShapeTyp.STRAIGHTLINE:
                                InkCanvas.Children.Add(straightLine);       //Add The Line To The Canvas
                                break;
                        }
                        inkManager.ProcessPointerUpdate(pt);        //ByPass The pt Info To The InkManager For Continous Update
                        e.Handled = true;                       //Tell Event Is Success
                    }
                    else
                    {
                        previousPosition = currentPosition;      //Set The Previous Position To The Current Position So That It Will Follow The Mouse
                        InkCanvas.Children.Add(line);       //Add The Line To The Canvas
                        inkManager.ProcessPointerUpdate(pt);        //ByPass The pt Info To The InkManager For Continous Update
                        e.Handled = true;                       //Tell Event Is Success
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void OnMouseReleasedCanvas(object sender, PointerRoutedEventArgs e)     //Event Handler When The Mouse Is Released On The White Canvas
        {
            try
            {
                if (e.Pointer.PointerId == pointerId)           //For Checking If The Same Pointer Is Used
                {
                    PointerPoint pt = e.GetCurrentPoint(InkCanvas);      //For Getting The Current Position Of The Pointer
                    inkManager.ProcessPointerUp(pt);            //Registering The Position
                    releasePosition = pt.Position;
                }
                if (InkCanvas.Children.Contains(rectangle))
                {
                    Rectangle rect = new Rectangle()
                    {
                        Margin = new Thickness(previousPosition.X, previousPosition.Y, 0, 0),
                        Height = Math.Abs(previousPosition.Y - releasePosition.Y),
                        Width = Math.Abs(previousPosition.X - releasePosition.X),
                        StrokeThickness = strokeThickness,
                        Stroke = pen
                    };
                    InkCanvas.Children.Remove(rectangle);
                    InkCanvas.Children.Add(rect);
                }
                else if (InkCanvas.Children.Contains(ellipse))
                {
                    Ellipse ell = new Ellipse()
                    {
                        Margin = new Thickness(previousPosition.X, previousPosition.Y, 0, 0),
                        Height = Math.Abs(previousPosition.Y - releasePosition.Y),
                        Width = Math.Abs(previousPosition.X - releasePosition.X),
                        StrokeThickness = strokeThickness,
                        Stroke = pen
                    };
                    InkCanvas.Children.Remove(ellipse);
                    InkCanvas.Children.Add(ell);
                }
                else if (InkCanvas.Children.Contains(straightLine))
                {
                    Line sl = new Line()
                    {
                        X1 = previousPosition.X,
                        Y1 = previousPosition.Y,         //Cursor Coordinate From The Mouse Press Event
                        X2 = releasePosition.X,
                        Y2 = releasePosition.Y,                 //Cursor Coordinate From The Mouse Move Event
                        StrokeThickness = strokeThickness,                              //Set The Thickness Of The Drawing Pen
                        Stroke = pen
                    };
                    InkCanvas.Children.Remove(straightLine);
                    InkCanvas.Children.Add(sl);
                }
                pointerId = 0;              //Now User Can Draw With Another Type Of Input[whether its touch or mouse]
                e.Handled = true;           //Tell Event Is Success

            }
            catch (Exception ex)
            {

            }
        }
        
        private void OnMouseExitCanvas(object sender, PointerRoutedEventArgs e)         //Event Handler When The Mouse Exited From The White Canvas            
        {
            
        }

        private void TextBlock_SelectionChanged(object sender, RoutedEventArgs e)       //AutoGenerated Content
        {

        }

        private void RadioButton_Checked(object sender, RoutedEventArgs e)      //AutoGenerated Content
        {

        }

        #region    Methods For The Color Buttons

        private void BlackColorClicked(object sender, RoutedEventArgs e)        //If The Black Color Is Selected Change The Current Color To Black
        {
            SolidColorBrush blackBrush = new SolidColorBrush(Colors.Black);     //Create A Black Brush
            CurrentColor.Foreground = blackBrush;                               //Set The CurrentColor Button's Foreground To Black Color
            pen = blackBrush;                                                   //Set The Pen To Black Color
        }

        private void WhiteColorClicked(object sender, RoutedEventArgs e)        //If The White Color Is Selected Change The Current Color To White
        {
            SolidColorBrush WhiteBrush = new SolidColorBrush(Colors.White);     //Create A White Brush
            CurrentColor.Foreground = WhiteBrush;                               //Set The CurrentColor Button's Foreground To White Color
            pen = WhiteBrush;                                                   //Set The Pen To White Color
        }

        private void GreenColorFClicked(object sender, RoutedEventArgs e)       //If The Green Color Is Selected Change The Current Color To Green
        {
            SolidColorBrush GreenBrush = new SolidColorBrush(Colors.LightGreen);     //Create A Green Brush
            CurrentColor.Foreground = GreenBrush;                               //Set The CurrentColor Button's Foreground To Green Color
            pen = GreenBrush;                                                   //Set The Pen To Green Color
        }

        private void YellowColorClicked(object sender, RoutedEventArgs e)       //If The Yellow Color Is Selected Change The Current Color To Yellow
        {
            SolidColorBrush YellowBrush = new SolidColorBrush(Colors.Yellow);     //Create A Yellow Brush
            CurrentColor.Foreground = YellowBrush;                               //Set The CurrentColor Button's Foreground To Yellow Color
            pen = YellowBrush;                                                   //Set The Pen To Yellow Color
        }

        private void RedColorClicked(object sender, RoutedEventArgs e)      //If The Red Color Is Selected Change The Current Color To Red
        {
            SolidColorBrush RedBrush = new SolidColorBrush(Colors.Red);     //Create A Red Brush
            CurrentColor.Foreground = RedBrush;                               //Set The CurrentColor Button's Foreground To Red Color
            pen = RedBrush;                                                   //Set The Pen To Red Color
        }

        private void BlueColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush BlueBrush = new SolidColorBrush(Colors.Blue);     //Create A Blue Brush
            CurrentColor.Foreground = BlueBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = BlueBrush;                                                   //Set The Pen To Blue Color
        }

        private void PinkColorClicked(object sender, RoutedEventArgs e)     //If The Pink Color Is Selected Change The Current Color To Pink
        {
            SolidColorBrush PinkBrush = new SolidColorBrush(Colors.Pink);     //Create A Pink Brush
            CurrentColor.Foreground = PinkBrush;                               //Set The CurrentColor Button's Foreground To Pink Color
            pen = PinkBrush;                                                   //Set The Pen To Pink Color
        }

        private void BrownColorClicked(object sender, RoutedEventArgs e)        //If The Brown Color Is Selected Change The Current Color To Brown
        {
            SolidColorBrush BrownBrush = new SolidColorBrush(Colors.Brown);     //Create A Brown Brush
            CurrentColor.Foreground = BrownBrush;                               //Set The CurrentColor Button's Foreground To Brown Color
            pen = BrownBrush;                                                   //Set The Pen To Brown Color
        }

        private void BlueColorFClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush BlueFBrush = new SolidColorBrush(Colors.LightBlue);     //Create A Blue Brush
            CurrentColor.Foreground = BlueFBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = BlueFBrush;                                                   //Set The Pen To Blue Color
        }

        private void GreenColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush GreenBrush = new SolidColorBrush(Colors.Green);     //Create A Blue Brush
            CurrentColor.Foreground = GreenBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = GreenBrush;                                                   //Set The Pen To Blue Color
        }

        private void OrangeColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush OrangeBrush = new SolidColorBrush(Colors.Orange);     //Create A Blue Brush
            CurrentColor.Foreground = OrangeBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = OrangeBrush;                                                   //Set The Pen To Blue Color
        }

        private void GrayColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush GrayBrush = new SolidColorBrush(Colors.Gray);     //Create A Blue Brush
            CurrentColor.Foreground = GrayBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = GrayBrush;                                                   //Set The Pen To Blue Color
        }

        private void DarkBlueColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush DarkBlueBrush = new SolidColorBrush(Colors.DarkBlue);     //Create A Blue Brush
            CurrentColor.Foreground = DarkBlueBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = DarkBlueBrush;                                                   //Set The Pen To Blue Color
        }

        private void GoldColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush DarkBlueBrush = new SolidColorBrush(Colors.Gold);     //Create A Blue Brush
            CurrentColor.Foreground = DarkBlueBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = DarkBlueBrush;                                                   //Set The Pen To Blue Color
        }

        private void SilverColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            SolidColorBrush DarkBlueBrush = new SolidColorBrush(Colors.Silver);     //Create A Blue Brush
            CurrentColor.Foreground = DarkBlueBrush;                               //Set The CurrentColor Button's Foreground To Blue Color
            pen = DarkBlueBrush;                                                   //Set The Pen To Blue Color
        }
        #endregion

        private void LineButtonClicked(object sender, RoutedEventArgs e)        //Invoked When Line Button Is Clicked
        {
            shapeKind = ShapeTyp.LINE;         //Change The Shape Type To Line
            ShapeType.Symbol = Symbol.Highlight;
        }

        private void EllipseButtonClicked(object sender, RoutedEventArgs e)     //Invoked When Ellipse Button Is Clicked
        {
            shapeKind = ShapeTyp.ELLIPSE;          //Change The Shape Type To Ellipse
            ShapeType.Symbol = Symbol.Target;
        }

        private void UpButtonClicked(object sender, RoutedEventArgs e)     //Invoked When Ellipse Button Is Clicked
        {
            shapeKind = ShapeTyp.STRAIGHTLINE;          //Change The Shape Type To Ellipse
            ShapeType.Symbol = Symbol.Up;
        }

        private void RectangleButtonClicked(object sender, RoutedEventArgs e)       //Invoked When Rectangle Button Is Clicked
        {
            shapeKind = ShapeTyp.RECTANGLE;            //Change The Shape Type To Rectangle
            ShapeType.Symbol = Symbol.ViewAll;
        }

        private void ShapeTypeClicked(object sender, RoutedEventArgs e)       //Invoked When Rectangle Button Is Clicked
        {
            if (ShapeTypeContainer.Visibility == Windows.UI.Xaml.Visibility.Collapsed){
                PopUpManager();
                ShapeTypeContainer.Visibility = Windows.UI.Xaml.Visibility.Visible;
            }
            else
                ShapeTypeContainer.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
        }

        private void ClearButtonClicked(object sender, RoutedEventArgs e)       //Invoked When Undo Button Is Clicked
        {   
            InkCanvas.Children.Clear();         //Clearing All The Paintings From The Canvas
        }

        private void ChangeBgButtonClicked(object sender, RoutedEventArgs e)       //Invoked When Undo Button Is Clicked
        {
            if (CanvasBgPopup.Visibility == Windows.UI.Xaml.Visibility.Collapsed) {
                PopUpManager();
                CanvasBgPopup.Visibility = Windows.UI.Xaml.Visibility.Visible;
            }
            else
            {
                CanvasBgPopup.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            }
        }

        private void HelpButtonClicked(object sender, RoutedEventArgs e)       //Invoked When Undo Button Is Clicked
        {
            if (HelpTxt.Visibility == Windows.UI.Xaml.Visibility.Collapsed)
                HelpTxt.Visibility = Windows.UI.Xaml.Visibility.Visible;
            else
                HelpTxt.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
        }

        private async Task SaveIt()             //Implement The Saving Mechanism
        {
            try
            {
                FileSavePicker fileSave = new FileSavePicker();             //Insantiating a fileSave Object In Order To Save The Drawn Object
                fileSave.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;        //Picking A Start Location For Choosing Where To Save
                fileSave.DefaultFileExtension = ".png";                                 //Setting The Default FileFormat To png
                fileSave.FileTypeChoices.Add("PNG", new String[] { ".png" });           //Adding PNG To The File Type Choice
                StorageFile storage = await fileSave.PickSaveFileAsync();
                using (IOutputStream fileStream = await storage.OpenAsync(FileAccessMode.ReadWrite))
                {
                    if (fileStream != null)
                    {
                        await inkManager.SaveAsync(fileStream);
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private async Task OpenIt() {
            try
            {
                Windows.Storage.Pickers.FileOpenPicker fopen = new Windows.Storage.Pickers.FileOpenPicker();
                fopen.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.Desktop;
                fopen.FileTypeFilter.Add(".jpg");
                StorageFile file = await fopen.PickSingleFileAsync();
                using (var stream = await file.OpenAsync(Windows.Storage.FileAccessMode.Read))
                {
                    await inkManager.LoadAsync(stream);

                    if (inkManager.GetStrokes().Count > 0)
                    {
                        RenderStrokes();
                    }
                }
            }
            catch (Exception e)
            {
                var dlg = new MessageDialog("PLease Choose A Correct File");
                dlg.ShowAsync();
            }
        }

        private void SaveButtonClicked(object sender, RoutedEventArgs e)        //Invoked When Save Button Is Clicked
        {
            SaveIt();           //Call The Method That Implements The Saving Mechanism
        }

        private void OpenButtonClicked(object sender, RoutedEventArgs e)        //Invoked When Save Button Is Clicked
        {
            OpenIt();           //Call The Method That Implements The Saving Mechanism
        }

        private async void CopyButtonClicked(object sender, RoutedEventArgs e)
        {
            var strokes = inkManager.GetStrokes();

            for (int i = 0; i < strokes.Count; i++)
            {
                strokes[i].Selected = true;
            }

            inkManager.CopySelectedToClipboard();
            var dlg = new MessageDialog("Copied");
            dlg.ShowAsync();
        }

        private async void PasteButtonClicked(object sender, RoutedEventArgs e)
        {
            var canpaste = inkManager.CanPasteFromClipboard();
            if (canpaste)
            {
                inkManager.PasteFromClipboard(previousPosition);
                var dataPackageView = Windows.ApplicationModel.DataTransfer.Clipboard.GetContent();
                if (dataPackageView.Contains(Windows.ApplicationModel.DataTransfer.StandardDataFormats.Bitmap))
                {
                    await dataPackageView.GetBitmapAsync();
                    RandomAccessStreamReference rv = await dataPackageView.GetBitmapAsync();
                    IRandomAccessStream irac = await rv.OpenReadAsync();
                    BitmapImage img = new BitmapImage();
                    img.SetSource(irac);
                    PasteBoard.Source = img;
                }
            }
            else
            {
                var msgdlg = new MessageDialog("Clipboard is empty or unable to paste from clipboard");
                msgdlg.ShowAsync();
            }
        }

        private void EraseButtonClicked(object sender, RoutedEventArgs e)
        {
            pen = new SolidColorBrush(Colors.White);
            shapeKind = ShapeTyp.LINE;
        }

        private void SizeChoicePressed(object sender, PointerRoutedEventArgs e)
        {
            if (SizeChoicePopUp.Visibility == Windows.UI.Xaml.Visibility.Visible)
                SizeChoicePopUp.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            else {
                PopUpManager();
                SizeChoicePopUp.Visibility = Windows.UI.Xaml.Visibility.Visible;
            }
        }

        private void CurrentColorClicked(object sender, PointerRoutedEventArgs e)
        {
            if (ColorPicker1.Visibility == Windows.UI.Xaml.Visibility.Collapsed)
            {
                PopUpManager();
                ColorPicker1.Visibility = Windows.UI.Xaml.Visibility.Visible;
                ColorPicker2.Visibility = Windows.UI.Xaml.Visibility.Visible;
                ColorPicker3.Visibility = Windows.UI.Xaml.Visibility.Visible;
                ColorPicker4.Visibility = Windows.UI.Xaml.Visibility.Visible;
                ColorPicker5.Visibility = Windows.UI.Xaml.Visibility.Visible;
                ColorPicker6.Visibility = Windows.UI.Xaml.Visibility.Visible;
            }
            else
            {
                ColorPicker1.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                ColorPicker2.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                ColorPicker3.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                ColorPicker4.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                ColorPicker5.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                ColorPicker6.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            }
        }

        public void PopUpManager() {
            ItemsControl[] popups = {layerPopup, fColorPicker1, fColorPicker2, fColorPicker3, fColorPicker4, fColorPicker5, fColorPicker6, CanvasBgPopup, ColorPicker1, ColorPicker2, ColorPicker3, ColorPicker4, ColorPicker5, ColorPicker6, SizeChoicePopUp, ShapeTypeContainer };
            foreach(ItemsControl popup in popups){
                popup.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            }
        }

        private void WhiteCanvasClicked(object sender, PointerRoutedEventArgs e)
        {
            SolidColorBrush sl = new SolidColorBrush(Colors.White);
            ChangeBg.Foreground = sl;
            InkCanvas.Background = sl;
        }

        private void BlackCanvasClicked(object sender, PointerRoutedEventArgs e)
        {
            SolidColorBrush sl = new SolidColorBrush(Colors.Black);
            ChangeBg.Foreground = sl;
            InkCanvas.Background = sl;
        }

        private void RenderStroke(InkStroke stroke, Color color, double width, double opacity = 1)
        {
            var renderingStrokes = stroke.GetRenderingSegments();
            var path = new Windows.UI.Xaml.Shapes.Path();
            path.Data = new PathGeometry();
            ((PathGeometry)path.Data).Figures = new PathFigureCollection();
            var pathFigure = new PathFigure();
            pathFigure.StartPoint = renderingStrokes.First().Position;
            ((PathGeometry)path.Data).Figures.Add(pathFigure);
            foreach (var renderStroke in renderingStrokes)
            {
                pathFigure.Segments.Add(new BezierSegment()
                {
                    Point1 = renderStroke.BezierControlPoint1,
                    Point2 = renderStroke.BezierControlPoint2,
                    Point3 = renderStroke.Position
                });
            }

            path.StrokeThickness = width;
            path.Stroke = new SolidColorBrush(color);

            path.Opacity = opacity;

            InkCanvas.Children.Add(path);
        }

        private void RenderStrokes()
        {
            var strokes = inkManager.GetStrokes();

            var highlightStrokes = inkManager.GetStrokes();

            foreach (var stroke in strokes)
            {
                if (stroke.Selected)
                {
                    RenderStroke(stroke, stroke.DrawingAttributes.Color, stroke.DrawingAttributes.Size.Width * 2);
                }
                else
                {
                    RenderStroke(stroke, stroke.DrawingAttributes.Color, stroke.DrawingAttributes.Size.Width);
                }
            }

            foreach (var stroke in highlightStrokes)
            {
                if (stroke.Selected)
                {
                    RenderStroke(stroke, stroke.DrawingAttributes.Color, stroke.DrawingAttributes.Size.Width * 2, 0.4);
                }
                else
                {
                    RenderStroke(stroke, stroke.DrawingAttributes.Color, stroke.DrawingAttributes.Size.Width, 0.4);
                }
            }
        }

        private void FillButtonClicked(object sender, PointerRoutedEventArgs e)
        {
            if (fColorPicker1.Visibility == Windows.UI.Xaml.Visibility.Collapsed)
            {
                PopUpManager();
                fColorPicker1.Visibility = Windows.UI.Xaml.Visibility.Visible;
                fColorPicker2.Visibility = Windows.UI.Xaml.Visibility.Visible;
                fColorPicker3.Visibility = Windows.UI.Xaml.Visibility.Visible;
                fColorPicker4.Visibility = Windows.UI.Xaml.Visibility.Visible;
                fColorPicker5.Visibility = Windows.UI.Xaml.Visibility.Visible;
                fColorPicker6.Visibility = Windows.UI.Xaml.Visibility.Visible;
            }
            else
            {
                fColorPicker1.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                fColorPicker2.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                fColorPicker3.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                fColorPicker4.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                fColorPicker5.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                fColorPicker6.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            }
        }

        #region    Methods For The Fill Color Buttons

        private void fBlackColorClicked(object sender, RoutedEventArgs e)        //If The Black Color Is Selected Change The Current Color To Black
        {
            fillPen = new SolidColorBrush(Colors.Black);     //Create A Black Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Black Color
        }

        private void fWhiteColorClicked(object sender, RoutedEventArgs e)        //If The White Color Is Selected Change The Current Color To White
        {
            fillPen = new SolidColorBrush(Colors.White);     //Create A White Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To White Color
        }

        private void fGreenColorFClicked(object sender, RoutedEventArgs e)       //If The Green Color Is Selected Change The Current Color To Green
        {
            fillPen = new SolidColorBrush(Colors.LightGreen);     //Create A Green Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Green Color
        }

        private void fYellowColorClicked(object sender, RoutedEventArgs e)       //If The Yellow Color Is Selected Change The Current Color To Yellow
        {
            fillPen = new SolidColorBrush(Colors.Yellow);     //Create A Yellow Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Yellow Color
        }

        private void fRedColorClicked(object sender, RoutedEventArgs e)      //If The Red Color Is Selected Change The Current Color To Red
        {
            fillPen = new SolidColorBrush(Colors.Red);     //Create A Red Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Red Color
        }

        private void fBlueColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.Blue);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fPinkColorClicked(object sender, RoutedEventArgs e)     //If The Pink Color Is Selected Change The Current Color To Pink
        {
            fillPen = new SolidColorBrush(Colors.Pink);     //Create A Pink Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Pink Color
        }

        private void fBrownColorClicked(object sender, RoutedEventArgs e)        //If The Brown Color Is Selected Change The Current Color To Brown
        {
            fillPen = new SolidColorBrush(Colors.Brown);     //Create A Brown Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Brown Color
        }

        private void fBlueColorFClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.LightBlue);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fGreenColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.Green);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fOrangeColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.Orange);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fGrayColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.Gray);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fDarkBlueColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.DarkBlue);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fGoldColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.Gold);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }

        private void fSilverColorClicked(object sender, RoutedEventArgs e)     //If The Blue Color Is Selected Change The Current Color To Blue
        {
            fillPen = new SolidColorBrush(Colors.Silver);     //Create A Blue Brush
            fCurrentColor.Foreground = fillPen;                               //Set The CurrentColor Button's Foreground To Blue Color
        }
        #endregion

        private void LayerButtonClicked(object sender, RoutedEventArgs e)
        {
            layerManager();
            if (layerPopup.Visibility == Windows.UI.Xaml.Visibility.Collapsed)
            {
                PopUpManager();
                layerPopup.Visibility = Windows.UI.Xaml.Visibility.Visible;
            }
            else
            {
                layerPopup.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            }
        }

        private void layer1Clicked(object sender, RoutedEventArgs e)
        {
            if (InkCanvas.Children.ElementAt(recAndell[0]) is Rectangle)     
            {
                Rectangle r = (Rectangle)InkCanvas.Children.ElementAt(recAndell[0]);
                r.Fill = fillPen;
            }
            else if (InkCanvas.Children.ElementAt(recAndell[0]) is Ellipse)
            {
                Ellipse r = (Ellipse)InkCanvas.Children.ElementAt(recAndell[0]);
                r.Fill = fillPen;
            }
        }

        private void layer2Clicked(object sender, RoutedEventArgs e)
        {
            if (InkCanvas.Children.ElementAt(recAndell[1]) is Rectangle)
            {
                Rectangle r = (Rectangle)InkCanvas.Children.ElementAt(recAndell[1]);
                r.Fill = fillPen;
            }
            else if (InkCanvas.Children.ElementAt(recAndell[1]) is Ellipse)
            {
                Ellipse r = (Ellipse)InkCanvas.Children.ElementAt(recAndell[1]);
                r.Fill = fillPen;
            }
        }
        
        private void layer3Clicked(object sender, RoutedEventArgs e)
        {
            if (InkCanvas.Children.ElementAt(recAndell[2]) is Rectangle)
            {
                Rectangle r = (Rectangle)InkCanvas.Children.ElementAt(recAndell[2]);
                r.Fill = fillPen;
            }
            else if (InkCanvas.Children.ElementAt(recAndell[2]) is Ellipse)
            {
                Ellipse r = (Ellipse)InkCanvas.Children.ElementAt(recAndell[2]);
                r.Fill = fillPen;
            }
        }
        
        private void layer4Clicked(object sender, RoutedEventArgs e)
        {
            if (InkCanvas.Children.ElementAt(recAndell[3]) is Rectangle)
            {
                Rectangle r = (Rectangle)InkCanvas.Children.ElementAt(recAndell[3]);
                r.Fill = fillPen;
            }
            else if (InkCanvas.Children.ElementAt(recAndell[3]) is Ellipse)
            {
                Ellipse r = (Ellipse)InkCanvas.Children.ElementAt(recAndell[3]);
                r.Fill = fillPen;
            }
        }
        
        private void layer5Clicked(object sender, RoutedEventArgs e)
        {
            if (InkCanvas.Children.ElementAt(recAndell[4]) is Rectangle)
            {
                Rectangle r = (Rectangle)InkCanvas.Children.ElementAt(recAndell[4]);
                r.Fill = fillPen;
            }
            else if (InkCanvas.Children.ElementAt(recAndell[4]) is Ellipse)
            {
                Ellipse r = (Ellipse)InkCanvas.Children.ElementAt(recAndell[4]);
                r.Fill = fillPen;
            }
        }

        int[] recAndell = new int[5];

        private void layerManager() {
                        
            SymbolIcon[] symbolarray = {layer1, layer2, layer3, layer4, layer5};
            symbolarray[0].Symbol = Symbol.Emoji;
            symbolarray[1].Symbol = Symbol.Emoji;
            symbolarray[2].Symbol = Symbol.Emoji;
            symbolarray[3].Symbol = Symbol.Emoji;
            symbolarray[4].Symbol = Symbol.Emoji;
                for (int i = 0; i < InkCanvas.Children.Count; i++)
                {
                    if (InkCanvas.Children.ElementAt(i) is Rectangle || InkCanvas.Children.ElementAt(i) is Ellipse) 
                    {
                        if (InkCanvas.Children.ElementAt(i) is Rectangle)
	                    {
                            for (int j = 0; j < 5; j++)
                            {
                                    if (symbolarray[j].Symbol == Symbol.Emoji) 
                                    {
                                        symbolarray[j].Symbol = Symbol.ViewAll;
                                        symbolarray[j].Visibility = Windows.UI.Xaml.Visibility.Visible;
                                        recAndell[j] = i;
                                        break;
                                    }
                            }
	                    }
                        else if (InkCanvas.Children.ElementAt(i) is Ellipse)
                        {
                            for (int j = 0; j < 5; j++)
                            {
                                    if (symbolarray[j].Symbol == Symbol.Emoji)
                                    {
                                        symbolarray[j].Symbol = Symbol.Target;
                                        symbolarray[j].Visibility = Windows.UI.Xaml.Visibility.Visible;
                                        recAndell[j] = i;
                                        break;
                                    }
                            }
                        }
                    }
                } 
        }

        private void hideLayers()
        {
            layer1.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            layer2.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            layer3.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            layer4.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
            layer5.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
        }

    }//End Of Class
}//End Of Namespace